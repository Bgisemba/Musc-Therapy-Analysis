{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPNdQEPkBE9yZv95ofDIavR",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Bgisemba/Musc-Therapy-Analysis/blob/prep/Music_Therapy_Analysis.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "LOADING AND PREVIEWING THE DATASET"
      ],
      "metadata": {
        "id": "FbV5uVsvdccz"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 32,
      "metadata": {
        "id": "9Zqm7MAu-H7V"
      },
      "outputs": [],
      "source": [
        "#importing libraries\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "# To display all the columns of dataframe\n",
        "pd.set_option('display.max_columns', 500)\n",
        "import warnings\n",
        "warnings.filterwarnings(\"ignore\")"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#loading the data\n",
        "df=pd.read_csv(\"/content/Music-and-Therapy-survey-1.csv\")\n",
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 426
        },
        "id": "HdyLSQcm-gFk",
        "outputId": "c8f1faba-ef1a-4211-fb8e-0ece68e29749"
      },
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         Timestamp   Age Primary streaming service  Hours per day  \\\n",
              "0  8/27/2022 19:29  18.0                   Spotify            3.0   \n",
              "1  8/27/2022 19:57  63.0                   Pandora            1.5   \n",
              "2  8/27/2022 21:28  18.0                   Spotify            4.0   \n",
              "3  8/27/2022 21:40  61.0             YouTube Music            2.5   \n",
              "4  8/27/2022 21:54  18.0                   Spotify            4.0   \n",
              "\n",
              "  While working Instrumentalist Composer         Fav genre Exploratory  \\\n",
              "0           Yes             Yes      Yes             Latin         Yes   \n",
              "1           Yes              No       No              Rock         Yes   \n",
              "2            No              No       No  Video game music          No   \n",
              "3           Yes              No      Yes              Jazz         Yes   \n",
              "4           Yes              No       No               R&B         Yes   \n",
              "\n",
              "  Foreign languages    BPM Frequency [Classical] Frequency [Country]  \\\n",
              "0               Yes  156.0                Rarely               Never   \n",
              "1                No  119.0             Sometimes               Never   \n",
              "2               Yes  132.0                 Never               Never   \n",
              "3               Yes   84.0             Sometimes               Never   \n",
              "4                No  107.0                 Never               Never   \n",
              "\n",
              "   Frequency [EDM] Frequency [Folk] Frequency [Gospel] Frequency [Hip hop]  \\\n",
              "0           Rarely            Never              Never           Sometimes   \n",
              "1            Never           Rarely          Sometimes              Rarely   \n",
              "2  Very frequently            Never              Never              Rarely   \n",
              "3            Never           Rarely          Sometimes               Never   \n",
              "4           Rarely            Never             Rarely     Very frequently   \n",
              "\n",
              "  Frequency [Jazz] Frequency [K pop] Frequency [Latin] Frequency [Lofi]  \\\n",
              "0            Never   Very frequently   Very frequently           Rarely   \n",
              "1  Very frequently            Rarely         Sometimes           Rarely   \n",
              "2           Rarely   Very frequently             Never        Sometimes   \n",
              "3  Very frequently         Sometimes   Very frequently        Sometimes   \n",
              "4            Never   Very frequently         Sometimes        Sometimes   \n",
              "\n",
              "  Frequency [Metal]  Frequency [Pop]  Frequency [R&B]  Frequency [Rap]  \\\n",
              "0             Never  Very frequently        Sometimes  Very frequently   \n",
              "1             Never        Sometimes        Sometimes           Rarely   \n",
              "2         Sometimes           Rarely            Never           Rarely   \n",
              "3             Never        Sometimes        Sometimes            Never   \n",
              "4             Never        Sometimes  Very frequently  Very frequently   \n",
              "\n",
              "  Frequency [Rock] Frequency [Video game music]  Anxiety  Depression  \\\n",
              "0            Never                    Sometimes      3.0         0.0   \n",
              "1  Very frequently                       Rarely      7.0         2.0   \n",
              "2           Rarely              Very frequently      7.0         7.0   \n",
              "3            Never                        Never      9.0         7.0   \n",
              "4            Never                       Rarely      7.0         2.0   \n",
              "\n",
              "   Insomnia  OCD Music effects    Permissions  \n",
              "0       1.0  0.0           NaN  I understand.  \n",
              "1       2.0  1.0           NaN  I understand.  \n",
              "2      10.0  2.0     No effect  I understand.  \n",
              "3       3.0  3.0       Improve  I understand.  \n",
              "4       5.0  9.0       Improve  I understand.  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-548da7bb-847a-4151-8d5c-2b43f19c0c55\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Timestamp</th>\n",
              "      <th>Age</th>\n",
              "      <th>Primary streaming service</th>\n",
              "      <th>Hours per day</th>\n",
              "      <th>While working</th>\n",
              "      <th>Instrumentalist</th>\n",
              "      <th>Composer</th>\n",
              "      <th>Fav genre</th>\n",
              "      <th>Exploratory</th>\n",
              "      <th>Foreign languages</th>\n",
              "      <th>BPM</th>\n",
              "      <th>Frequency [Classical]</th>\n",
              "      <th>Frequency [Country]</th>\n",
              "      <th>Frequency [EDM]</th>\n",
              "      <th>Frequency [Folk]</th>\n",
              "      <th>Frequency [Gospel]</th>\n",
              "      <th>Frequency [Hip hop]</th>\n",
              "      <th>Frequency [Jazz]</th>\n",
              "      <th>Frequency [K pop]</th>\n",
              "      <th>Frequency [Latin]</th>\n",
              "      <th>Frequency [Lofi]</th>\n",
              "      <th>Frequency [Metal]</th>\n",
              "      <th>Frequency [Pop]</th>\n",
              "      <th>Frequency [R&amp;B]</th>\n",
              "      <th>Frequency [Rap]</th>\n",
              "      <th>Frequency [Rock]</th>\n",
              "      <th>Frequency [Video game music]</th>\n",
              "      <th>Anxiety</th>\n",
              "      <th>Depression</th>\n",
              "      <th>Insomnia</th>\n",
              "      <th>OCD</th>\n",
              "      <th>Music effects</th>\n",
              "      <th>Permissions</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>8/27/2022 19:29</td>\n",
              "      <td>18.0</td>\n",
              "      <td>Spotify</td>\n",
              "      <td>3.0</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Latin</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Yes</td>\n",
              "      <td>156.0</td>\n",
              "      <td>Rarely</td>\n",
              "      <td>Never</td>\n",
              "      <td>Rarely</td>\n",
              "      <td>Never</td>\n",
              "      <td>Never</td>\n",
              "      <td>Sometimes</td>\n",
              "      <td>Never</td>\n",
              "      <td>Very frequently</td>\n",
              "      <td>Very frequently</td>\n",
              "      <td>Rarely</td>\n",
              "      <td>Never</td>\n",
              "      <td>Very frequently</td>\n",
              "      <td>Sometimes</td>\n",
              "      <td>Very frequently</td>\n",
              "      <td>Never</td>\n",
              "      <td>Sometimes</td>\n",
              "      <td>3.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>I understand.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>8/27/2022 19:57</td>\n",
              "      <td>63.0</td>\n",
              "      <td>Pandora</td>\n",
              "      <td>1.5</td>\n",
              "      <td>Yes</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>Rock</td>\n",
              "      <td>Yes</td>\n",
              "      <td>No</td>\n",
              "      <td>119.0</td>\n",
              "      <td>Sometimes</td>\n",
              "      <td>Never</td>\n",
              "      <td>Never</td>\n",
              "      <td>Rarely</td>\n",
              "      <td>Sometimes</td>\n",
              "      <td>Rarely</td>\n",
              "      <td>Very frequently</td>\n",
              "      <td>Rarely</td>\n",
              "      <td>Sometimes</td>\n",
              "      <td>Rarely</td>\n",
              "      <td>Never</td>\n",
              "      <td>Sometimes</td>\n",
              "      <td>Sometimes</td>\n",
              "      <td>Rarely</td>\n",
              "      <td>Very frequently</td>\n",
              "      <td>Rarely</td>\n",
              "      <td>7.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>I understand.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>8/27/2022 21:28</td>\n",
              "      <td>18.0</td>\n",
              "      <td>Spotify</td>\n",
              "      <td>4.0</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>Video game music</td>\n",
              "      <td>No</td>\n",
              "      <td>Yes</td>\n",
              "      <td>132.0</td>\n",
              "      <td>Never</td>\n",
              "      <td>Never</td>\n",
              "      <td>Very frequently</td>\n",
              "      <td>Never</td>\n",
              "      <td>Never</td>\n",
              "      <td>Rarely</td>\n",
              "      <td>Rarely</td>\n",
              "      <td>Very frequently</td>\n",
              "      <td>Never</td>\n",
              "      <td>Sometimes</td>\n",
              "      <td>Sometimes</td>\n",
              "      <td>Rarely</td>\n",
              "      <td>Never</td>\n",
              "      <td>Rarely</td>\n",
              "      <td>Rarely</td>\n",
              "      <td>Very frequently</td>\n",
              "      <td>7.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>No effect</td>\n",
              "      <td>I understand.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>8/27/2022 21:40</td>\n",
              "      <td>61.0</td>\n",
              "      <td>YouTube Music</td>\n",
              "      <td>2.5</td>\n",
              "      <td>Yes</td>\n",
              "      <td>No</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Jazz</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Yes</td>\n",
              "      <td>84.0</td>\n",
              "      <td>Sometimes</td>\n",
              "      <td>Never</td>\n",
              "      <td>Never</td>\n",
              "      <td>Rarely</td>\n",
              "      <td>Sometimes</td>\n",
              "      <td>Never</td>\n",
              "      <td>Very frequently</td>\n",
              "      <td>Sometimes</td>\n",
              "      <td>Very frequently</td>\n",
              "      <td>Sometimes</td>\n",
              "      <td>Never</td>\n",
              "      <td>Sometimes</td>\n",
              "      <td>Sometimes</td>\n",
              "      <td>Never</td>\n",
              "      <td>Never</td>\n",
              "      <td>Never</td>\n",
              "      <td>9.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>Improve</td>\n",
              "      <td>I understand.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>8/27/2022 21:54</td>\n",
              "      <td>18.0</td>\n",
              "      <td>Spotify</td>\n",
              "      <td>4.0</td>\n",
              "      <td>Yes</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>R&amp;B</td>\n",
              "      <td>Yes</td>\n",
              "      <td>No</td>\n",
              "      <td>107.0</td>\n",
              "      <td>Never</td>\n",
              "      <td>Never</td>\n",
              "      <td>Rarely</td>\n",
              "      <td>Never</td>\n",
              "      <td>Rarely</td>\n",
              "      <td>Very frequently</td>\n",
              "      <td>Never</td>\n",
              "      <td>Very frequently</td>\n",
              "      <td>Sometimes</td>\n",
              "      <td>Sometimes</td>\n",
              "      <td>Never</td>\n",
              "      <td>Sometimes</td>\n",
              "      <td>Very frequently</td>\n",
              "      <td>Very frequently</td>\n",
              "      <td>Never</td>\n",
              "      <td>Rarely</td>\n",
              "      <td>7.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>Improve</td>\n",
              "      <td>I understand.</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-548da7bb-847a-4151-8d5c-2b43f19c0c55')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-548da7bb-847a-4151-8d5c-2b43f19c0c55 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-548da7bb-847a-4151-8d5c-2b43f19c0c55');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 33
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.tail()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 426
        },
        "id": "dYvgVMyc_4mc",
        "outputId": "56197f87-4602-45b3-cb3f-84a76c62e11e"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            Timestamp   Age Primary streaming service  Hours per day  \\\n",
              "731  10/30/2022 14:37  17.0                   Spotify            2.0   \n",
              "732   11/1/2022 22:26  18.0                   Spotify            1.0   \n",
              "733   11/3/2022 23:24  19.0   Other streaming service            6.0   \n",
              "734   11/4/2022 17:31  19.0                   Spotify            5.0   \n",
              "735    11/9/2022 1:55  29.0             YouTube Music            2.0   \n",
              "\n",
              "    While working Instrumentalist Composer  Fav genre Exploratory  \\\n",
              "731           Yes             Yes       No       Rock         Yes   \n",
              "732           Yes             Yes       No        Pop         Yes   \n",
              "733           Yes              No      Yes        Rap         Yes   \n",
              "734           Yes             Yes       No  Classical          No   \n",
              "735           Yes              No       No    Hip hop         Yes   \n",
              "\n",
              "    Foreign languages    BPM Frequency [Classical] Frequency [Country]  \\\n",
              "731               Yes  120.0       Very frequently              Rarely   \n",
              "732               Yes  160.0                Rarely              Rarely   \n",
              "733                No  120.0                Rarely           Sometimes   \n",
              "734                No  170.0       Very frequently               Never   \n",
              "735               Yes   98.0             Sometimes              Rarely   \n",
              "\n",
              "     Frequency [EDM] Frequency [Folk] Frequency [Gospel] Frequency [Hip hop]  \\\n",
              "731            Never        Sometimes              Never           Sometimes   \n",
              "732            Never            Never              Never               Never   \n",
              "733        Sometimes           Rarely             Rarely     Very frequently   \n",
              "734            Never            Never              Never               Never   \n",
              "735  Very frequently        Sometimes             Rarely     Very frequently   \n",
              "\n",
              "    Frequency [Jazz] Frequency [K pop] Frequency [Latin] Frequency [Lofi]  \\\n",
              "731           Rarely             Never         Sometimes           Rarely   \n",
              "732           Rarely             Never             Never           Rarely   \n",
              "733           Rarely            Rarely            Rarely        Sometimes   \n",
              "734           Rarely             Never             Never            Never   \n",
              "735  Very frequently         Sometimes             Never           Rarely   \n",
              "\n",
              "    Frequency [Metal]  Frequency [Pop]  Frequency [R&B]  Frequency [Rap]  \\\n",
              "731            Rarely  Very frequently            Never           Rarely   \n",
              "732             Never  Very frequently            Never            Never   \n",
              "733            Rarely        Sometimes        Sometimes        Sometimes   \n",
              "734             Never            Never            Never            Never   \n",
              "735             Never        Sometimes  Very frequently  Very frequently   \n",
              "\n",
              "    Frequency [Rock] Frequency [Video game music]  Anxiety  Depression  \\\n",
              "731  Very frequently                        Never      7.0         6.0   \n",
              "732        Sometimes                    Sometimes      3.0         2.0   \n",
              "733           Rarely                       Rarely      2.0         2.0   \n",
              "734            Never                    Sometimes      2.0         3.0   \n",
              "735  Very frequently                       Rarely      2.0         2.0   \n",
              "\n",
              "     Insomnia  OCD Music effects    Permissions  \n",
              "731       0.0  9.0       Improve  I understand.  \n",
              "732       2.0  5.0       Improve  I understand.  \n",
              "733       2.0  2.0       Improve  I understand.  \n",
              "734       2.0  1.0       Improve  I understand.  \n",
              "735       2.0  5.0       Improve  I understand.  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6a6bd13f-b165-4d0b-9ae6-a95a3ba19b01\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Timestamp</th>\n",
              "      <th>Age</th>\n",
              "      <th>Primary streaming service</th>\n",
              "      <th>Hours per day</th>\n",
              "      <th>While working</th>\n",
              "      <th>Instrumentalist</th>\n",
              "      <th>Composer</th>\n",
              "      <th>Fav genre</th>\n",
              "      <th>Exploratory</th>\n",
              "      <th>Foreign languages</th>\n",
              "      <th>BPM</th>\n",
              "      <th>Frequency [Classical]</th>\n",
              "      <th>Frequency [Country]</th>\n",
              "      <th>Frequency [EDM]</th>\n",
              "      <th>Frequency [Folk]</th>\n",
              "      <th>Frequency [Gospel]</th>\n",
              "      <th>Frequency [Hip hop]</th>\n",
              "      <th>Frequency [Jazz]</th>\n",
              "      <th>Frequency [K pop]</th>\n",
              "      <th>Frequency [Latin]</th>\n",
              "      <th>Frequency [Lofi]</th>\n",
              "      <th>Frequency [Metal]</th>\n",
              "      <th>Frequency [Pop]</th>\n",
              "      <th>Frequency [R&amp;B]</th>\n",
              "      <th>Frequency [Rap]</th>\n",
              "      <th>Frequency [Rock]</th>\n",
              "      <th>Frequency [Video game music]</th>\n",
              "      <th>Anxiety</th>\n",
              "      <th>Depression</th>\n",
              "      <th>Insomnia</th>\n",
              "      <th>OCD</th>\n",
              "      <th>Music effects</th>\n",
              "      <th>Permissions</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>731</th>\n",
              "      <td>10/30/2022 14:37</td>\n",
              "      <td>17.0</td>\n",
              "      <td>Spotify</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Yes</td>\n",
              "      <td>No</td>\n",
              "      <td>Rock</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Yes</td>\n",
              "      <td>120.0</td>\n",
              "      <td>Very frequently</td>\n",
              "      <td>Rarely</td>\n",
              "      <td>Never</td>\n",
              "      <td>Sometimes</td>\n",
              "      <td>Never</td>\n",
              "      <td>Sometimes</td>\n",
              "      <td>Rarely</td>\n",
              "      <td>Never</td>\n",
              "      <td>Sometimes</td>\n",
              "      <td>Rarely</td>\n",
              "      <td>Rarely</td>\n",
              "      <td>Very frequently</td>\n",
              "      <td>Never</td>\n",
              "      <td>Rarely</td>\n",
              "      <td>Very frequently</td>\n",
              "      <td>Never</td>\n",
              "      <td>7.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>Improve</td>\n",
              "      <td>I understand.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>732</th>\n",
              "      <td>11/1/2022 22:26</td>\n",
              "      <td>18.0</td>\n",
              "      <td>Spotify</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Yes</td>\n",
              "      <td>No</td>\n",
              "      <td>Pop</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Yes</td>\n",
              "      <td>160.0</td>\n",
              "      <td>Rarely</td>\n",
              "      <td>Rarely</td>\n",
              "      <td>Never</td>\n",
              "      <td>Never</td>\n",
              "      <td>Never</td>\n",
              "      <td>Never</td>\n",
              "      <td>Rarely</td>\n",
              "      <td>Never</td>\n",
              "      <td>Never</td>\n",
              "      <td>Rarely</td>\n",
              "      <td>Never</td>\n",
              "      <td>Very frequently</td>\n",
              "      <td>Never</td>\n",
              "      <td>Never</td>\n",
              "      <td>Sometimes</td>\n",
              "      <td>Sometimes</td>\n",
              "      <td>3.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>Improve</td>\n",
              "      <td>I understand.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>733</th>\n",
              "      <td>11/3/2022 23:24</td>\n",
              "      <td>19.0</td>\n",
              "      <td>Other streaming service</td>\n",
              "      <td>6.0</td>\n",
              "      <td>Yes</td>\n",
              "      <td>No</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Rap</td>\n",
              "      <td>Yes</td>\n",
              "      <td>No</td>\n",
              "      <td>120.0</td>\n",
              "      <td>Rarely</td>\n",
              "      <td>Sometimes</td>\n",
              "      <td>Sometimes</td>\n",
              "      <td>Rarely</td>\n",
              "      <td>Rarely</td>\n",
              "      <td>Very frequently</td>\n",
              "      <td>Rarely</td>\n",
              "      <td>Rarely</td>\n",
              "      <td>Rarely</td>\n",
              "      <td>Sometimes</td>\n",
              "      <td>Rarely</td>\n",
              "      <td>Sometimes</td>\n",
              "      <td>Sometimes</td>\n",
              "      <td>Sometimes</td>\n",
              "      <td>Rarely</td>\n",
              "      <td>Rarely</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Improve</td>\n",
              "      <td>I understand.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>734</th>\n",
              "      <td>11/4/2022 17:31</td>\n",
              "      <td>19.0</td>\n",
              "      <td>Spotify</td>\n",
              "      <td>5.0</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Yes</td>\n",
              "      <td>No</td>\n",
              "      <td>Classical</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>170.0</td>\n",
              "      <td>Very frequently</td>\n",
              "      <td>Never</td>\n",
              "      <td>Never</td>\n",
              "      <td>Never</td>\n",
              "      <td>Never</td>\n",
              "      <td>Never</td>\n",
              "      <td>Rarely</td>\n",
              "      <td>Never</td>\n",
              "      <td>Never</td>\n",
              "      <td>Never</td>\n",
              "      <td>Never</td>\n",
              "      <td>Never</td>\n",
              "      <td>Never</td>\n",
              "      <td>Never</td>\n",
              "      <td>Never</td>\n",
              "      <td>Sometimes</td>\n",
              "      <td>2.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Improve</td>\n",
              "      <td>I understand.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>735</th>\n",
              "      <td>11/9/2022 1:55</td>\n",
              "      <td>29.0</td>\n",
              "      <td>YouTube Music</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Yes</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>Hip hop</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Yes</td>\n",
              "      <td>98.0</td>\n",
              "      <td>Sometimes</td>\n",
              "      <td>Rarely</td>\n",
              "      <td>Very frequently</td>\n",
              "      <td>Sometimes</td>\n",
              "      <td>Rarely</td>\n",
              "      <td>Very frequently</td>\n",
              "      <td>Very frequently</td>\n",
              "      <td>Sometimes</td>\n",
              "      <td>Never</td>\n",
              "      <td>Rarely</td>\n",
              "      <td>Never</td>\n",
              "      <td>Sometimes</td>\n",
              "      <td>Very frequently</td>\n",
              "      <td>Very frequently</td>\n",
              "      <td>Very frequently</td>\n",
              "      <td>Rarely</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>Improve</td>\n",
              "      <td>I understand.</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6a6bd13f-b165-4d0b-9ae6-a95a3ba19b01')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-6a6bd13f-b165-4d0b-9ae6-a95a3ba19b01 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-6a6bd13f-b165-4d0b-9ae6-a95a3ba19b01');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 34
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Looking at the nuber of records\n",
        "df.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "91GruFHkDSYM",
        "outputId": "bab8dc35-5d82-4bd4-f6b7-6e5d4c889abb"
      },
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(736, 33)"
            ]
          },
          "metadata": {},
          "execution_count": 35
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#cheking the data types of the variables\n",
        "df.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2H7p-_DdDcXe",
        "outputId": "feccd4be-5149-4bee-960c-23049c27f354"
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 736 entries, 0 to 735\n",
            "Data columns (total 33 columns):\n",
            " #   Column                        Non-Null Count  Dtype  \n",
            "---  ------                        --------------  -----  \n",
            " 0   Timestamp                     736 non-null    object \n",
            " 1   Age                           735 non-null    float64\n",
            " 2   Primary streaming service     735 non-null    object \n",
            " 3   Hours per day                 736 non-null    float64\n",
            " 4   While working                 733 non-null    object \n",
            " 5   Instrumentalist               732 non-null    object \n",
            " 6   Composer                      735 non-null    object \n",
            " 7   Fav genre                     736 non-null    object \n",
            " 8   Exploratory                   736 non-null    object \n",
            " 9   Foreign languages             732 non-null    object \n",
            " 10  BPM                           629 non-null    float64\n",
            " 11  Frequency [Classical]         736 non-null    object \n",
            " 12  Frequency [Country]           736 non-null    object \n",
            " 13  Frequency [EDM]               736 non-null    object \n",
            " 14  Frequency [Folk]              736 non-null    object \n",
            " 15  Frequency [Gospel]            736 non-null    object \n",
            " 16  Frequency [Hip hop]           736 non-null    object \n",
            " 17  Frequency [Jazz]              736 non-null    object \n",
            " 18  Frequency [K pop]             736 non-null    object \n",
            " 19  Frequency [Latin]             736 non-null    object \n",
            " 20  Frequency [Lofi]              736 non-null    object \n",
            " 21  Frequency [Metal]             736 non-null    object \n",
            " 22  Frequency [Pop]               736 non-null    object \n",
            " 23  Frequency [R&B]               736 non-null    object \n",
            " 24  Frequency [Rap]               736 non-null    object \n",
            " 25  Frequency [Rock]              736 non-null    object \n",
            " 26  Frequency [Video game music]  736 non-null    object \n",
            " 27  Anxiety                       736 non-null    float64\n",
            " 28  Depression                    736 non-null    float64\n",
            " 29  Insomnia                      736 non-null    float64\n",
            " 30  OCD                           736 non-null    float64\n",
            " 31  Music effects                 728 non-null    object \n",
            " 32  Permissions                   736 non-null    object \n",
            "dtypes: float64(7), object(26)\n",
            "memory usage: 189.9+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Describing Data in the data frame\n",
        "df.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 344
        },
        "id": "WPS6UvQ-D16E",
        "outputId": "92c6d0c4-6048-443d-80eb-851b124434fd"
      },
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "              Age  Hours per day           BPM     Anxiety  Depression  \\\n",
              "count  735.000000     736.000000  6.290000e+02  736.000000  736.000000   \n",
              "mean    25.206803       3.572758  1.589948e+06    5.837636    4.796196   \n",
              "std     12.054970       3.028199  3.987261e+07    2.793054    3.028870   \n",
              "min     10.000000       0.000000  0.000000e+00    0.000000    0.000000   \n",
              "25%     18.000000       2.000000  1.000000e+02    4.000000    2.000000   \n",
              "50%     21.000000       3.000000  1.200000e+02    6.000000    5.000000   \n",
              "75%     28.000000       5.000000  1.440000e+02    8.000000    7.000000   \n",
              "max     89.000000      24.000000  1.000000e+09   10.000000   10.000000   \n",
              "\n",
              "         Insomnia         OCD  \n",
              "count  736.000000  736.000000  \n",
              "mean     3.738451    2.637228  \n",
              "std      3.088689    2.842017  \n",
              "min      0.000000    0.000000  \n",
              "25%      1.000000    0.000000  \n",
              "50%      3.000000    2.000000  \n",
              "75%      6.000000    5.000000  \n",
              "max     10.000000   10.000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-121660bd-9d53-4139-8fd8-79f27fa33fc7\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Age</th>\n",
              "      <th>Hours per day</th>\n",
              "      <th>BPM</th>\n",
              "      <th>Anxiety</th>\n",
              "      <th>Depression</th>\n",
              "      <th>Insomnia</th>\n",
              "      <th>OCD</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>735.000000</td>\n",
              "      <td>736.000000</td>\n",
              "      <td>6.290000e+02</td>\n",
              "      <td>736.000000</td>\n",
              "      <td>736.000000</td>\n",
              "      <td>736.000000</td>\n",
              "      <td>736.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>25.206803</td>\n",
              "      <td>3.572758</td>\n",
              "      <td>1.589948e+06</td>\n",
              "      <td>5.837636</td>\n",
              "      <td>4.796196</td>\n",
              "      <td>3.738451</td>\n",
              "      <td>2.637228</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>12.054970</td>\n",
              "      <td>3.028199</td>\n",
              "      <td>3.987261e+07</td>\n",
              "      <td>2.793054</td>\n",
              "      <td>3.028870</td>\n",
              "      <td>3.088689</td>\n",
              "      <td>2.842017</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>10.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>18.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>1.000000e+02</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>21.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>1.200000e+02</td>\n",
              "      <td>6.000000</td>\n",
              "      <td>5.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>2.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>28.000000</td>\n",
              "      <td>5.000000</td>\n",
              "      <td>1.440000e+02</td>\n",
              "      <td>8.000000</td>\n",
              "      <td>7.000000</td>\n",
              "      <td>6.000000</td>\n",
              "      <td>5.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>89.000000</td>\n",
              "      <td>24.000000</td>\n",
              "      <td>1.000000e+09</td>\n",
              "      <td>10.000000</td>\n",
              "      <td>10.000000</td>\n",
              "      <td>10.000000</td>\n",
              "      <td>10.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-121660bd-9d53-4139-8fd8-79f27fa33fc7')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-121660bd-9d53-4139-8fd8-79f27fa33fc7 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-121660bd-9d53-4139-8fd8-79f27fa33fc7');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 37
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "DATA CLEANING"
      ],
      "metadata": {
        "id": "y7gy0V-pd6NZ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# looking at null values\n",
        "df.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Pd-hgGLxDygC",
        "outputId": "e1e7ab2c-576f-494a-b498-5fb778dcfc60"
      },
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Timestamp                         0\n",
              "Age                               1\n",
              "Primary streaming service         1\n",
              "Hours per day                     0\n",
              "While working                     3\n",
              "Instrumentalist                   4\n",
              "Composer                          1\n",
              "Fav genre                         0\n",
              "Exploratory                       0\n",
              "Foreign languages                 4\n",
              "BPM                             107\n",
              "Frequency [Classical]             0\n",
              "Frequency [Country]               0\n",
              "Frequency [EDM]                   0\n",
              "Frequency [Folk]                  0\n",
              "Frequency [Gospel]                0\n",
              "Frequency [Hip hop]               0\n",
              "Frequency [Jazz]                  0\n",
              "Frequency [K pop]                 0\n",
              "Frequency [Latin]                 0\n",
              "Frequency [Lofi]                  0\n",
              "Frequency [Metal]                 0\n",
              "Frequency [Pop]                   0\n",
              "Frequency [R&B]                   0\n",
              "Frequency [Rap]                   0\n",
              "Frequency [Rock]                  0\n",
              "Frequency [Video game music]      0\n",
              "Anxiety                           0\n",
              "Depression                        0\n",
              "Insomnia                          0\n",
              "OCD                               0\n",
              "Music effects                     8\n",
              "Permissions                       0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 38
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# how many total missing values do we have?\n",
        "total_cells = np.product(df.shape)\n",
        "total_missing = df.isnull().sum().sum()\n",
        "\n",
        "# percent of data that is missing\n",
        "percent_missing = (total_missing/total_cells) * 100\n",
        "print(percent_missing)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "b4PsaOK0e5A3",
        "outputId": "6b9e8823-e94b-405b-8170-ba92a785ad5d"
      },
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.5311264822134387\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Finding the variables with missing values\n",
        "missing_num_var = [var for var in df.columns if df[var].isnull().sum()>0]\n",
        "missing_num_var"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KvaI7o8UmtxD",
        "outputId": "678db452-42e2-416e-97c8-7a8e4864e5ce"
      },
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['Age',\n",
              " 'Primary streaming service',\n",
              " 'While working',\n",
              " 'Instrumentalist',\n",
              " 'Composer',\n",
              " 'Foreign languages',\n",
              " 'BPM',\n",
              " 'Music effects']"
            ]
          },
          "metadata": {},
          "execution_count": 40
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Dealing with the missing values(imputation)\n",
        "#Numerical variables\n",
        "df['Age'].fillna(df['Age'].median(),inplace=True)\n",
        "df['BPM'].fillna(df['BPM'].median(),inplace=True)"
      ],
      "metadata": {
        "id": "4DNWk1xunF0J"
      },
      "execution_count": 41,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Why we use median instead of mean to fill null values\n",
        "We use the median instead of the mean to fill null values when the distribution of the data is skewed or has extreme values (outliers). In such cases, the mean can be biased towards the extreme values and not truly represent the typical or central value of the dataset.\n",
        "\n",
        "\n",
        "The median, on the other hand, is less sensitive to outliers and represents the middle value of a dataset when the values are sorted in ascending or descending order. Therefore, using the median to fill null values is a more robust and reliable approach in situations where the data is skewed or contains outliers."
      ],
      "metadata": {
        "id": "rCLeRpYIpHyz"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Categorical variables imputing the mode\n",
        "mode_values = df.select_dtypes(include=['object']).mode().iloc[0]\n",
        "\n",
        "# replace each object column's repeating value with its mode\n",
        "df[df.select_dtypes(include=['object']).columns] = df.select_dtypes(include=['object']).apply(lambda x: x.fillna(x.mode()[0]))\n",
        "\n",
        "# print the updated dataframe\n",
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 748
        },
        "id": "qQTuv2AMp_oC",
        "outputId": "7fde79f9-f4dc-49ef-dc29-a7eeb8c37073"
      },
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            Timestamp   Age Primary streaming service  Hours per day  \\\n",
              "0     8/27/2022 19:29  18.0                   Spotify            3.0   \n",
              "1     8/27/2022 19:57  63.0                   Pandora            1.5   \n",
              "2     8/27/2022 21:28  18.0                   Spotify            4.0   \n",
              "3     8/27/2022 21:40  61.0             YouTube Music            2.5   \n",
              "4     8/27/2022 21:54  18.0                   Spotify            4.0   \n",
              "..                ...   ...                       ...            ...   \n",
              "731  10/30/2022 14:37  17.0                   Spotify            2.0   \n",
              "732   11/1/2022 22:26  18.0                   Spotify            1.0   \n",
              "733   11/3/2022 23:24  19.0   Other streaming service            6.0   \n",
              "734   11/4/2022 17:31  19.0                   Spotify            5.0   \n",
              "735    11/9/2022 1:55  29.0             YouTube Music            2.0   \n",
              "\n",
              "    While working Instrumentalist Composer         Fav genre Exploratory  \\\n",
              "0             Yes             Yes      Yes             Latin         Yes   \n",
              "1             Yes              No       No              Rock         Yes   \n",
              "2              No              No       No  Video game music          No   \n",
              "3             Yes              No      Yes              Jazz         Yes   \n",
              "4             Yes              No       No               R&B         Yes   \n",
              "..            ...             ...      ...               ...         ...   \n",
              "731           Yes             Yes       No              Rock         Yes   \n",
              "732           Yes             Yes       No               Pop         Yes   \n",
              "733           Yes              No      Yes               Rap         Yes   \n",
              "734           Yes             Yes       No         Classical          No   \n",
              "735           Yes              No       No           Hip hop         Yes   \n",
              "\n",
              "    Foreign languages    BPM Frequency [Classical] Frequency [Country]  \\\n",
              "0                 Yes  156.0                Rarely               Never   \n",
              "1                  No  119.0             Sometimes               Never   \n",
              "2                 Yes  132.0                 Never               Never   \n",
              "3                 Yes   84.0             Sometimes               Never   \n",
              "4                  No  107.0                 Never               Never   \n",
              "..                ...    ...                   ...                 ...   \n",
              "731               Yes  120.0       Very frequently              Rarely   \n",
              "732               Yes  160.0                Rarely              Rarely   \n",
              "733                No  120.0                Rarely           Sometimes   \n",
              "734                No  170.0       Very frequently               Never   \n",
              "735               Yes   98.0             Sometimes              Rarely   \n",
              "\n",
              "     Frequency [EDM] Frequency [Folk] Frequency [Gospel] Frequency [Hip hop]  \\\n",
              "0             Rarely            Never              Never           Sometimes   \n",
              "1              Never           Rarely          Sometimes              Rarely   \n",
              "2    Very frequently            Never              Never              Rarely   \n",
              "3              Never           Rarely          Sometimes               Never   \n",
              "4             Rarely            Never             Rarely     Very frequently   \n",
              "..               ...              ...                ...                 ...   \n",
              "731            Never        Sometimes              Never           Sometimes   \n",
              "732            Never            Never              Never               Never   \n",
              "733        Sometimes           Rarely             Rarely     Very frequently   \n",
              "734            Never            Never              Never               Never   \n",
              "735  Very frequently        Sometimes             Rarely     Very frequently   \n",
              "\n",
              "    Frequency [Jazz] Frequency [K pop] Frequency [Latin] Frequency [Lofi]  \\\n",
              "0              Never   Very frequently   Very frequently           Rarely   \n",
              "1    Very frequently            Rarely         Sometimes           Rarely   \n",
              "2             Rarely   Very frequently             Never        Sometimes   \n",
              "3    Very frequently         Sometimes   Very frequently        Sometimes   \n",
              "4              Never   Very frequently         Sometimes        Sometimes   \n",
              "..               ...               ...               ...              ...   \n",
              "731           Rarely             Never         Sometimes           Rarely   \n",
              "732           Rarely             Never             Never           Rarely   \n",
              "733           Rarely            Rarely            Rarely        Sometimes   \n",
              "734           Rarely             Never             Never            Never   \n",
              "735  Very frequently         Sometimes             Never           Rarely   \n",
              "\n",
              "    Frequency [Metal]  Frequency [Pop]  Frequency [R&B]  Frequency [Rap]  \\\n",
              "0               Never  Very frequently        Sometimes  Very frequently   \n",
              "1               Never        Sometimes        Sometimes           Rarely   \n",
              "2           Sometimes           Rarely            Never           Rarely   \n",
              "3               Never        Sometimes        Sometimes            Never   \n",
              "4               Never        Sometimes  Very frequently  Very frequently   \n",
              "..                ...              ...              ...              ...   \n",
              "731            Rarely  Very frequently            Never           Rarely   \n",
              "732             Never  Very frequently            Never            Never   \n",
              "733            Rarely        Sometimes        Sometimes        Sometimes   \n",
              "734             Never            Never            Never            Never   \n",
              "735             Never        Sometimes  Very frequently  Very frequently   \n",
              "\n",
              "    Frequency [Rock] Frequency [Video game music]  Anxiety  Depression  \\\n",
              "0              Never                    Sometimes      3.0         0.0   \n",
              "1    Very frequently                       Rarely      7.0         2.0   \n",
              "2             Rarely              Very frequently      7.0         7.0   \n",
              "3              Never                        Never      9.0         7.0   \n",
              "4              Never                       Rarely      7.0         2.0   \n",
              "..               ...                          ...      ...         ...   \n",
              "731  Very frequently                        Never      7.0         6.0   \n",
              "732        Sometimes                    Sometimes      3.0         2.0   \n",
              "733           Rarely                       Rarely      2.0         2.0   \n",
              "734            Never                    Sometimes      2.0         3.0   \n",
              "735  Very frequently                       Rarely      2.0         2.0   \n",
              "\n",
              "     Insomnia  OCD Music effects    Permissions  \n",
              "0         1.0  0.0       Improve  I understand.  \n",
              "1         2.0  1.0       Improve  I understand.  \n",
              "2        10.0  2.0     No effect  I understand.  \n",
              "3         3.0  3.0       Improve  I understand.  \n",
              "4         5.0  9.0       Improve  I understand.  \n",
              "..        ...  ...           ...            ...  \n",
              "731       0.0  9.0       Improve  I understand.  \n",
              "732       2.0  5.0       Improve  I understand.  \n",
              "733       2.0  2.0       Improve  I understand.  \n",
              "734       2.0  1.0       Improve  I understand.  \n",
              "735       2.0  5.0       Improve  I understand.  \n",
              "\n",
              "[736 rows x 33 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4cc7c88a-6118-4e0b-8350-aafc923b548b\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Timestamp</th>\n",
              "      <th>Age</th>\n",
              "      <th>Primary streaming service</th>\n",
              "      <th>Hours per day</th>\n",
              "      <th>While working</th>\n",
              "      <th>Instrumentalist</th>\n",
              "      <th>Composer</th>\n",
              "      <th>Fav genre</th>\n",
              "      <th>Exploratory</th>\n",
              "      <th>Foreign languages</th>\n",
              "      <th>BPM</th>\n",
              "      <th>Frequency [Classical]</th>\n",
              "      <th>Frequency [Country]</th>\n",
              "      <th>Frequency [EDM]</th>\n",
              "      <th>Frequency [Folk]</th>\n",
              "      <th>Frequency [Gospel]</th>\n",
              "      <th>Frequency [Hip hop]</th>\n",
              "      <th>Frequency [Jazz]</th>\n",
              "      <th>Frequency [K pop]</th>\n",
              "      <th>Frequency [Latin]</th>\n",
              "      <th>Frequency [Lofi]</th>\n",
              "      <th>Frequency [Metal]</th>\n",
              "      <th>Frequency [Pop]</th>\n",
              "      <th>Frequency [R&amp;B]</th>\n",
              "      <th>Frequency [Rap]</th>\n",
              "      <th>Frequency [Rock]</th>\n",
              "      <th>Frequency [Video game music]</th>\n",
              "      <th>Anxiety</th>\n",
              "      <th>Depression</th>\n",
              "      <th>Insomnia</th>\n",
              "      <th>OCD</th>\n",
              "      <th>Music effects</th>\n",
              "      <th>Permissions</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>8/27/2022 19:29</td>\n",
              "      <td>18.0</td>\n",
              "      <td>Spotify</td>\n",
              "      <td>3.0</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Latin</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Yes</td>\n",
              "      <td>156.0</td>\n",
              "      <td>Rarely</td>\n",
              "      <td>Never</td>\n",
              "      <td>Rarely</td>\n",
              "      <td>Never</td>\n",
              "      <td>Never</td>\n",
              "      <td>Sometimes</td>\n",
              "      <td>Never</td>\n",
              "      <td>Very frequently</td>\n",
              "      <td>Very frequently</td>\n",
              "      <td>Rarely</td>\n",
              "      <td>Never</td>\n",
              "      <td>Very frequently</td>\n",
              "      <td>Sometimes</td>\n",
              "      <td>Very frequently</td>\n",
              "      <td>Never</td>\n",
              "      <td>Sometimes</td>\n",
              "      <td>3.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>Improve</td>\n",
              "      <td>I understand.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>8/27/2022 19:57</td>\n",
              "      <td>63.0</td>\n",
              "      <td>Pandora</td>\n",
              "      <td>1.5</td>\n",
              "      <td>Yes</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>Rock</td>\n",
              "      <td>Yes</td>\n",
              "      <td>No</td>\n",
              "      <td>119.0</td>\n",
              "      <td>Sometimes</td>\n",
              "      <td>Never</td>\n",
              "      <td>Never</td>\n",
              "      <td>Rarely</td>\n",
              "      <td>Sometimes</td>\n",
              "      <td>Rarely</td>\n",
              "      <td>Very frequently</td>\n",
              "      <td>Rarely</td>\n",
              "      <td>Sometimes</td>\n",
              "      <td>Rarely</td>\n",
              "      <td>Never</td>\n",
              "      <td>Sometimes</td>\n",
              "      <td>Sometimes</td>\n",
              "      <td>Rarely</td>\n",
              "      <td>Very frequently</td>\n",
              "      <td>Rarely</td>\n",
              "      <td>7.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Improve</td>\n",
              "      <td>I understand.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>8/27/2022 21:28</td>\n",
              "      <td>18.0</td>\n",
              "      <td>Spotify</td>\n",
              "      <td>4.0</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>Video game music</td>\n",
              "      <td>No</td>\n",
              "      <td>Yes</td>\n",
              "      <td>132.0</td>\n",
              "      <td>Never</td>\n",
              "      <td>Never</td>\n",
              "      <td>Very frequently</td>\n",
              "      <td>Never</td>\n",
              "      <td>Never</td>\n",
              "      <td>Rarely</td>\n",
              "      <td>Rarely</td>\n",
              "      <td>Very frequently</td>\n",
              "      <td>Never</td>\n",
              "      <td>Sometimes</td>\n",
              "      <td>Sometimes</td>\n",
              "      <td>Rarely</td>\n",
              "      <td>Never</td>\n",
              "      <td>Rarely</td>\n",
              "      <td>Rarely</td>\n",
              "      <td>Very frequently</td>\n",
              "      <td>7.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>No effect</td>\n",
              "      <td>I understand.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>8/27/2022 21:40</td>\n",
              "      <td>61.0</td>\n",
              "      <td>YouTube Music</td>\n",
              "      <td>2.5</td>\n",
              "      <td>Yes</td>\n",
              "      <td>No</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Jazz</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Yes</td>\n",
              "      <td>84.0</td>\n",
              "      <td>Sometimes</td>\n",
              "      <td>Never</td>\n",
              "      <td>Never</td>\n",
              "      <td>Rarely</td>\n",
              "      <td>Sometimes</td>\n",
              "      <td>Never</td>\n",
              "      <td>Very frequently</td>\n",
              "      <td>Sometimes</td>\n",
              "      <td>Very frequently</td>\n",
              "      <td>Sometimes</td>\n",
              "      <td>Never</td>\n",
              "      <td>Sometimes</td>\n",
              "      <td>Sometimes</td>\n",
              "      <td>Never</td>\n",
              "      <td>Never</td>\n",
              "      <td>Never</td>\n",
              "      <td>9.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>Improve</td>\n",
              "      <td>I understand.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>8/27/2022 21:54</td>\n",
              "      <td>18.0</td>\n",
              "      <td>Spotify</td>\n",
              "      <td>4.0</td>\n",
              "      <td>Yes</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>R&amp;B</td>\n",
              "      <td>Yes</td>\n",
              "      <td>No</td>\n",
              "      <td>107.0</td>\n",
              "      <td>Never</td>\n",
              "      <td>Never</td>\n",
              "      <td>Rarely</td>\n",
              "      <td>Never</td>\n",
              "      <td>Rarely</td>\n",
              "      <td>Very frequently</td>\n",
              "      <td>Never</td>\n",
              "      <td>Very frequently</td>\n",
              "      <td>Sometimes</td>\n",
              "      <td>Sometimes</td>\n",
              "      <td>Never</td>\n",
              "      <td>Sometimes</td>\n",
              "      <td>Very frequently</td>\n",
              "      <td>Very frequently</td>\n",
              "      <td>Never</td>\n",
              "      <td>Rarely</td>\n",
              "      <td>7.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>Improve</td>\n",
              "      <td>I understand.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>731</th>\n",
              "      <td>10/30/2022 14:37</td>\n",
              "      <td>17.0</td>\n",
              "      <td>Spotify</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Yes</td>\n",
              "      <td>No</td>\n",
              "      <td>Rock</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Yes</td>\n",
              "      <td>120.0</td>\n",
              "      <td>Very frequently</td>\n",
              "      <td>Rarely</td>\n",
              "      <td>Never</td>\n",
              "      <td>Sometimes</td>\n",
              "      <td>Never</td>\n",
              "      <td>Sometimes</td>\n",
              "      <td>Rarely</td>\n",
              "      <td>Never</td>\n",
              "      <td>Sometimes</td>\n",
              "      <td>Rarely</td>\n",
              "      <td>Rarely</td>\n",
              "      <td>Very frequently</td>\n",
              "      <td>Never</td>\n",
              "      <td>Rarely</td>\n",
              "      <td>Very frequently</td>\n",
              "      <td>Never</td>\n",
              "      <td>7.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>Improve</td>\n",
              "      <td>I understand.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>732</th>\n",
              "      <td>11/1/2022 22:26</td>\n",
              "      <td>18.0</td>\n",
              "      <td>Spotify</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Yes</td>\n",
              "      <td>No</td>\n",
              "      <td>Pop</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Yes</td>\n",
              "      <td>160.0</td>\n",
              "      <td>Rarely</td>\n",
              "      <td>Rarely</td>\n",
              "      <td>Never</td>\n",
              "      <td>Never</td>\n",
              "      <td>Never</td>\n",
              "      <td>Never</td>\n",
              "      <td>Rarely</td>\n",
              "      <td>Never</td>\n",
              "      <td>Never</td>\n",
              "      <td>Rarely</td>\n",
              "      <td>Never</td>\n",
              "      <td>Very frequently</td>\n",
              "      <td>Never</td>\n",
              "      <td>Never</td>\n",
              "      <td>Sometimes</td>\n",
              "      <td>Sometimes</td>\n",
              "      <td>3.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>Improve</td>\n",
              "      <td>I understand.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>733</th>\n",
              "      <td>11/3/2022 23:24</td>\n",
              "      <td>19.0</td>\n",
              "      <td>Other streaming service</td>\n",
              "      <td>6.0</td>\n",
              "      <td>Yes</td>\n",
              "      <td>No</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Rap</td>\n",
              "      <td>Yes</td>\n",
              "      <td>No</td>\n",
              "      <td>120.0</td>\n",
              "      <td>Rarely</td>\n",
              "      <td>Sometimes</td>\n",
              "      <td>Sometimes</td>\n",
              "      <td>Rarely</td>\n",
              "      <td>Rarely</td>\n",
              "      <td>Very frequently</td>\n",
              "      <td>Rarely</td>\n",
              "      <td>Rarely</td>\n",
              "      <td>Rarely</td>\n",
              "      <td>Sometimes</td>\n",
              "      <td>Rarely</td>\n",
              "      <td>Sometimes</td>\n",
              "      <td>Sometimes</td>\n",
              "      <td>Sometimes</td>\n",
              "      <td>Rarely</td>\n",
              "      <td>Rarely</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Improve</td>\n",
              "      <td>I understand.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>734</th>\n",
              "      <td>11/4/2022 17:31</td>\n",
              "      <td>19.0</td>\n",
              "      <td>Spotify</td>\n",
              "      <td>5.0</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Yes</td>\n",
              "      <td>No</td>\n",
              "      <td>Classical</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>170.0</td>\n",
              "      <td>Very frequently</td>\n",
              "      <td>Never</td>\n",
              "      <td>Never</td>\n",
              "      <td>Never</td>\n",
              "      <td>Never</td>\n",
              "      <td>Never</td>\n",
              "      <td>Rarely</td>\n",
              "      <td>Never</td>\n",
              "      <td>Never</td>\n",
              "      <td>Never</td>\n",
              "      <td>Never</td>\n",
              "      <td>Never</td>\n",
              "      <td>Never</td>\n",
              "      <td>Never</td>\n",
              "      <td>Never</td>\n",
              "      <td>Sometimes</td>\n",
              "      <td>2.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Improve</td>\n",
              "      <td>I understand.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>735</th>\n",
              "      <td>11/9/2022 1:55</td>\n",
              "      <td>29.0</td>\n",
              "      <td>YouTube Music</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Yes</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>Hip hop</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Yes</td>\n",
              "      <td>98.0</td>\n",
              "      <td>Sometimes</td>\n",
              "      <td>Rarely</td>\n",
              "      <td>Very frequently</td>\n",
              "      <td>Sometimes</td>\n",
              "      <td>Rarely</td>\n",
              "      <td>Very frequently</td>\n",
              "      <td>Very frequently</td>\n",
              "      <td>Sometimes</td>\n",
              "      <td>Never</td>\n",
              "      <td>Rarely</td>\n",
              "      <td>Never</td>\n",
              "      <td>Sometimes</td>\n",
              "      <td>Very frequently</td>\n",
              "      <td>Very frequently</td>\n",
              "      <td>Very frequently</td>\n",
              "      <td>Rarely</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>Improve</td>\n",
              "      <td>I understand.</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>736 rows × 33 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4cc7c88a-6118-4e0b-8350-aafc923b548b')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-4cc7c88a-6118-4e0b-8350-aafc923b548b button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-4cc7c88a-6118-4e0b-8350-aafc923b548b');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 42
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#confirming if there are any missing values\n",
        "df.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "72-r6Oe4rJfB",
        "outputId": "e49e853e-14bc-4c84-aedd-6379e742b09f"
      },
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Timestamp                       0\n",
              "Age                             0\n",
              "Primary streaming service       0\n",
              "Hours per day                   0\n",
              "While working                   0\n",
              "Instrumentalist                 0\n",
              "Composer                        0\n",
              "Fav genre                       0\n",
              "Exploratory                     0\n",
              "Foreign languages               0\n",
              "BPM                             0\n",
              "Frequency [Classical]           0\n",
              "Frequency [Country]             0\n",
              "Frequency [EDM]                 0\n",
              "Frequency [Folk]                0\n",
              "Frequency [Gospel]              0\n",
              "Frequency [Hip hop]             0\n",
              "Frequency [Jazz]                0\n",
              "Frequency [K pop]               0\n",
              "Frequency [Latin]               0\n",
              "Frequency [Lofi]                0\n",
              "Frequency [Metal]               0\n",
              "Frequency [Pop]                 0\n",
              "Frequency [R&B]                 0\n",
              "Frequency [Rap]                 0\n",
              "Frequency [Rock]                0\n",
              "Frequency [Video game music]    0\n",
              "Anxiety                         0\n",
              "Depression                      0\n",
              "Insomnia                        0\n",
              "OCD                             0\n",
              "Music effects                   0\n",
              "Permissions                     0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 43
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "No missing values"
      ],
      "metadata": {
        "id": "5bW-Idnsr0wX"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# looking for duplicate rows\n",
        "duplicateRows = df[df.duplicated()]\n",
        "duplicateRows"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 165
        },
        "id": "wnV_blu4D8Tf",
        "outputId": "d5d03c38-6546-49b7-81ad-ddfbe758562a"
      },
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Empty DataFrame\n",
              "Columns: [Timestamp, Age, Primary streaming service, Hours per day, While working, Instrumentalist, Composer, Fav genre, Exploratory, Foreign languages, BPM, Frequency [Classical], Frequency [Country], Frequency [EDM], Frequency [Folk], Frequency [Gospel], Frequency [Hip hop], Frequency [Jazz], Frequency [K pop], Frequency [Latin], Frequency [Lofi], Frequency [Metal], Frequency [Pop], Frequency [R&B], Frequency [Rap], Frequency [Rock], Frequency [Video game music], Anxiety, Depression, Insomnia, OCD, Music effects, Permissions]\n",
              "Index: []"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-301efd21-c8a0-46d3-9d50-988d5b54d56a\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Timestamp</th>\n",
              "      <th>Age</th>\n",
              "      <th>Primary streaming service</th>\n",
              "      <th>Hours per day</th>\n",
              "      <th>While working</th>\n",
              "      <th>Instrumentalist</th>\n",
              "      <th>Composer</th>\n",
              "      <th>Fav genre</th>\n",
              "      <th>Exploratory</th>\n",
              "      <th>Foreign languages</th>\n",
              "      <th>BPM</th>\n",
              "      <th>Frequency [Classical]</th>\n",
              "      <th>Frequency [Country]</th>\n",
              "      <th>Frequency [EDM]</th>\n",
              "      <th>Frequency [Folk]</th>\n",
              "      <th>Frequency [Gospel]</th>\n",
              "      <th>Frequency [Hip hop]</th>\n",
              "      <th>Frequency [Jazz]</th>\n",
              "      <th>Frequency [K pop]</th>\n",
              "      <th>Frequency [Latin]</th>\n",
              "      <th>Frequency [Lofi]</th>\n",
              "      <th>Frequency [Metal]</th>\n",
              "      <th>Frequency [Pop]</th>\n",
              "      <th>Frequency [R&amp;B]</th>\n",
              "      <th>Frequency [Rap]</th>\n",
              "      <th>Frequency [Rock]</th>\n",
              "      <th>Frequency [Video game music]</th>\n",
              "      <th>Anxiety</th>\n",
              "      <th>Depression</th>\n",
              "      <th>Insomnia</th>\n",
              "      <th>OCD</th>\n",
              "      <th>Music effects</th>\n",
              "      <th>Permissions</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-301efd21-c8a0-46d3-9d50-988d5b54d56a')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-301efd21-c8a0-46d3-9d50-988d5b54d56a button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-301efd21-c8a0-46d3-9d50-988d5b54d56a');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 44
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Dv__0BqyLSKo",
        "outputId": "7ee151bc-670d-45b7-970f-83d6c17439e8"
      },
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['Timestamp', 'Age', 'Primary streaming service', 'Hours per day',\n",
              "       'While working', 'Instrumentalist', 'Composer', 'Fav genre',\n",
              "       'Exploratory', 'Foreign languages', 'BPM', 'Frequency [Classical]',\n",
              "       'Frequency [Country]', 'Frequency [EDM]', 'Frequency [Folk]',\n",
              "       'Frequency [Gospel]', 'Frequency [Hip hop]', 'Frequency [Jazz]',\n",
              "       'Frequency [K pop]', 'Frequency [Latin]', 'Frequency [Lofi]',\n",
              "       'Frequency [Metal]', 'Frequency [Pop]', 'Frequency [R&B]',\n",
              "       'Frequency [Rap]', 'Frequency [Rock]', 'Frequency [Video game music]',\n",
              "       'Anxiety', 'Depression', 'Insomnia', 'OCD', 'Music effects',\n",
              "       'Permissions'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 45
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "#checking for outliers\n",
        "col_names=['Age','Hours per day']\n",
        "\n",
        "fig, ax = plt.subplots(len(col_names), figsize=(15,10))\n",
        "\n",
        "for i, col_val in enumerate(col_names):\n",
        "    sns.boxplot(df[col_val], ax=ax[i])\n",
        "    ax[i].set_title('Box plot - {}'.format(col_val), fontsize=10)\n",
        "    ax[i].set_xlabel(col_val, fontsize=8)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 547
        },
        "id": "gDkJtF6gKZpB",
        "outputId": "be143967-443c-4bef-86c1-44215808587a"
      },
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x1000 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Let's compute IQR for each numerical feature\n",
        "df_IQR = df[df.select_dtypes([float, int]).columns].quantile(.75) - df[df.select_dtypes([float, int]).columns].quantile(.25)\n",
        "df_IQR"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pYwJljittBr5",
        "outputId": "627acb54-3786-4c0d-b86d-bce72f629f6a"
      },
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Age              10.0\n",
              "Hours per day     3.0\n",
              "BPM              35.0\n",
              "Anxiety           4.0\n",
              "Depression        5.0\n",
              "Insomnia          5.0\n",
              "OCD               5.0\n",
              "dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 47
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Let's compute maximum and minimum limits\n",
        "df_Max =  df[df.select_dtypes([float, int]).columns].quantile(.75) + (1.5*df_IQR)\n",
        "df_Min =  df[df.select_dtypes([float, int]).columns].quantile(.25) - (1.5*df_IQR)\n",
        "print(df_Min)\n",
        "print(\"\\n\")\n",
        "print(df_Max)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MWiUh8i6u0Lj",
        "outputId": "38069b44-efd6-4d99-b44b-f2504eca8e27"
      },
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Age               3.0\n",
            "Hours per day    -2.5\n",
            "BPM              52.5\n",
            "Anxiety          -2.0\n",
            "Depression       -5.5\n",
            "Insomnia         -6.5\n",
            "OCD              -7.5\n",
            "dtype: float64\n",
            "\n",
            "\n",
            "Age               43.0\n",
            "Hours per day      9.5\n",
            "BPM              192.5\n",
            "Anxiety           14.0\n",
            "Depression        14.5\n",
            "Insomnia          13.5\n",
            "OCD               12.5\n",
            "dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Loop for replacing outliers above upper bound with the upper bound value:\n",
        "for column in df.select_dtypes([float, int]).columns :\n",
        "\n",
        "    col_IQR = df[column].quantile(.75) - df[column].quantile(.25)\n",
        "    col_Max =  df[column].quantile(.75) + (1.5*col_IQR)\n",
        "    df[column][df[column] > col_Max] =  col_Max"
      ],
      "metadata": {
        "id": "6cCgKaS1vWcx"
      },
      "execution_count": 49,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Loop for replacing outliers under lower bound with the lower bound value:\n",
        "for column in df.select_dtypes([float, int]).columns :\n",
        "    col_IQR = df[column].quantile(.75) - df[column].quantile(.25)\n",
        "    col_Min =  df[column].quantile(.25) - (1.5*col_IQR)\n",
        "    df[column][df[column] < col_Min] =  col_Min"
      ],
      "metadata": {
        "id": "X3p5J21jveRw"
      },
      "execution_count": 50,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Results afer handling outliers\n",
        "col_names=['Age','Hours per day']\n",
        "\n",
        "fig, ax = plt.subplots(len(col_names), figsize=(15,10))\n",
        "\n",
        "for i, col_val in enumerate(col_names):\n",
        "    sns.boxplot(df[col_val], ax=ax[i])\n",
        "    ax[i].set_title('Box plot - {}'.format(col_val), fontsize=10)\n",
        "    ax[i].set_xlabel(col_val, fontsize=8)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 547
        },
        "id": "O9i31QAXvD0_",
        "outputId": "85548019-d209-4d41-f9c9-ccb742f0664d"
      },
      "execution_count": 51,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x1000 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#dropping irrelevant columns\n",
        "#list of irrelevant columns\n",
        "col=['Timestamp','Permissions']\n",
        "df.drop(col,inplace=True,axis=1)\n",
        "df.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hAYwm4TDABEA",
        "outputId": "2bb730f1-7c84-4fcf-c6e4-14c53e59fad3"
      },
      "execution_count": 52,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['Age', 'Primary streaming service', 'Hours per day', 'While working',\n",
              "       'Instrumentalist', 'Composer', 'Fav genre', 'Exploratory',\n",
              "       'Foreign languages', 'BPM', 'Frequency [Classical]',\n",
              "       'Frequency [Country]', 'Frequency [EDM]', 'Frequency [Folk]',\n",
              "       'Frequency [Gospel]', 'Frequency [Hip hop]', 'Frequency [Jazz]',\n",
              "       'Frequency [K pop]', 'Frequency [Latin]', 'Frequency [Lofi]',\n",
              "       'Frequency [Metal]', 'Frequency [Pop]', 'Frequency [R&B]',\n",
              "       'Frequency [Rap]', 'Frequency [Rock]', 'Frequency [Video game music]',\n",
              "       'Anxiety', 'Depression', 'Insomnia', 'OCD', 'Music effects'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 52
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Looking at Unique Ages\n",
        "Agegroup = df['Age'].unique()\n",
        "print(Agegroup)\n",
        "df['Age'].nunique()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DKF_GJ_oEhZx",
        "outputId": "23f90788-8acb-4df0-f648-8feeb6253c9e"
      },
      "execution_count": 53,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[18. 43. 21. 19. 17. 16. 15. 14. 20. 26. 23. 37. 36. 24. 22. 42. 25. 32.\n",
            " 29. 41. 31. 33. 30. 28. 34. 13. 35. 27. 38. 40. 10. 12. 39.]\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "33"
            ]
          },
          "metadata": {},
          "execution_count": 53
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Looking at Unique Primary Streaming Services\n",
        "pss = pd.value_counts(df['Primary streaming service'])\n",
        "print(pss)\n",
        "df['Primary streaming service'].nunique()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JFemrnDCDQN3",
        "outputId": "7b51d61a-6641-4ad2-ede3-e6b6884c356b"
      },
      "execution_count": 54,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Spotify                              459\n",
            "YouTube Music                         94\n",
            "I do not use a streaming service.     71\n",
            "Apple Music                           51\n",
            "Other streaming service               50\n",
            "Pandora                               11\n",
            "Name: Primary streaming service, dtype: int64\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "6"
            ]
          },
          "metadata": {},
          "execution_count": 54
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Looking at Unique Hours Per Day listen Services\n",
        "WW = pd.value_counts(df['Fav genre'])\n",
        "count_unique = df['Fav genre'].nunique()\n",
        "print(WW)\n",
        "count_unique"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YtCh3GnOJ24_",
        "outputId": "58b0e9a1-b22a-486e-f98b-7f69d938923d"
      },
      "execution_count": 55,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Rock                188\n",
            "Pop                 114\n",
            "Metal                88\n",
            "Classical            53\n",
            "Video game music     44\n",
            "EDM                  37\n",
            "R&B                  35\n",
            "Hip hop              35\n",
            "Folk                 30\n",
            "K pop                26\n",
            "Country              25\n",
            "Rap                  22\n",
            "Jazz                 20\n",
            "Lofi                 10\n",
            "Gospel                6\n",
            "Latin                 3\n",
            "Name: Fav genre, dtype: int64\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "16"
            ]
          },
          "metadata": {},
          "execution_count": 55
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ax = plt.axes()\n",
        "df['Primary streaming service'].value_counts().plot.bar()\n",
        "for i in ax.containers:\n",
        "    ax.bar_label(i,padding=1,fontsize=10)\n",
        "plt.xticks(rotation=0)\n",
        "plt.title('Primary streaming service')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 452
        },
        "id": "GlbjC5krLydS",
        "outputId": "2daeccef-9542-438f-c2f3-02580c7c0a90"
      },
      "execution_count": 56,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ax = plt.axes()\n",
        "df['Fav genre'].value_counts().plot.bar()\n",
        "for i in ax.containers:\n",
        "    ax.bar_label(i,padding=1,fontsize=10)\n",
        "plt.xticks(rotation=0)\n",
        "plt.title('Favourite genre')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 452
        },
        "id": "i4GyNjkUM4wi",
        "outputId": "cae0d22c-06b3-4ade-82b0-c210110d1b56"
      },
      "execution_count": 57,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Looking at peoples replay on different Music Types.\n",
        "classic_music = pd.value_counts(df['Frequency [Classical]'])\n",
        "country_music = pd.value_counts(df['Frequency [Country]'])\n",
        "edm_music = pd.value_counts(df['Frequency [EDM]'])\n",
        "Folk_music = pd.value_counts(df['Frequency [Folk]'])\n",
        "\n",
        "print('Classic Music Listners \\n',classic_music,'\\n\\n Country Music Listners\\n',country_music,\n",
        "      '\\n\\n EDM Music Listners\\n',edm_music,'\\n\\n Folk Music Listners\\n',Folk_music)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vKtEKiA4QYzH",
        "outputId": "028fe8b5-0fa6-48fe-ada7-f8947aa6d4a7"
      },
      "execution_count": 58,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Classic Music Listners \n",
            " Rarely             259\n",
            "Sometimes          200\n",
            "Never              169\n",
            "Very frequently    108\n",
            "Name: Frequency [Classical], dtype: int64 \n",
            "\n",
            " Country Music Listners\n",
            " Never              343\n",
            "Rarely             233\n",
            "Sometimes          111\n",
            "Very frequently     49\n",
            "Name: Frequency [Country], dtype: int64 \n",
            "\n",
            " EDM Music Listners\n",
            " Never              307\n",
            "Rarely             194\n",
            "Sometimes          146\n",
            "Very frequently     89\n",
            "Name: Frequency [EDM], dtype: int64 \n",
            "\n",
            " Folk Music Listners\n",
            " Never              292\n",
            "Rarely             221\n",
            "Sometimes          145\n",
            "Very frequently     78\n",
            "Name: Frequency [Folk], dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Looking at peoples replay on different Music Types.\n",
        "Gospel_music = pd.value_counts(df['Frequency [Gospel]'])\n",
        "hiphop_music = pd.value_counts(df['Frequency [Hip hop]'])\n",
        "Jazz_music = pd.value_counts(df['Frequency [Jazz]'])\n",
        "Kpop_music = pd.value_counts(df['Frequency [K pop]'])\n",
        "\n",
        "print('Gospel Music Listners \\n',Gospel_music,'\\n\\n Hip Hop Music Listners\\n',hiphop_music,\n",
        "      '\\n\\n Jazz Music Listners\\n',Jazz_music,'\\n\\n K Pop Music Listners\\n',Kpop_music)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KLDaQEPOT4ow",
        "outputId": "302d3121-19b7-45bf-f310-088a779f3d1d"
      },
      "execution_count": 59,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Gospel Music Listners \n",
            " Never              535\n",
            "Rarely             135\n",
            "Sometimes           52\n",
            "Very frequently     14\n",
            "Name: Frequency [Gospel], dtype: int64 \n",
            "\n",
            " Hip Hop Music Listners\n",
            " Sometimes          218\n",
            "Rarely             214\n",
            "Never              181\n",
            "Very frequently    123\n",
            "Name: Frequency [Hip hop], dtype: int64 \n",
            "\n",
            " Jazz Music Listners\n",
            " Never              261\n",
            "Rarely             247\n",
            "Sometimes          175\n",
            "Very frequently     53\n",
            "Name: Frequency [Jazz], dtype: int64 \n",
            "\n",
            " K Pop Music Listners\n",
            " Never              416\n",
            "Rarely             176\n",
            "Very frequently     77\n",
            "Sometimes           67\n",
            "Name: Frequency [K pop], dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Looking at peoples replay on different Music Types.\n",
        "lofi_music = pd.value_counts(df['Frequency [Lofi]'])\n",
        "metal_music = pd.value_counts(df['Frequency [Metal]'])\n",
        "pop_music = pd.value_counts(df['Frequency [Pop]'])\n",
        "rnb_music = pd.value_counts(df['Frequency [R&B]'])\n",
        "\n",
        "print('Lofi Music Listners \\n',lofi_music,'\\n\\n Metal Music Listners\\n',metal_music,\n",
        "      '\\n\\n Pop Music Listners\\n',pop_music,'\\n\\n R & B Music Listners\\n',rnb_music)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1dCKWNr-UHqq",
        "outputId": "44d86f4c-4516-4e50-c4aa-44dc91c626d8"
      },
      "execution_count": 60,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Lofi Music Listners \n",
            " Never              280\n",
            "Rarely             211\n",
            "Sometimes          160\n",
            "Very frequently     85\n",
            "Name: Frequency [Lofi], dtype: int64 \n",
            "\n",
            " Metal Music Listners\n",
            " Never              264\n",
            "Rarely             192\n",
            "Very frequently    146\n",
            "Sometimes          134\n",
            "Name: Frequency [Metal], dtype: int64 \n",
            "\n",
            " Pop Music Listners\n",
            " Very frequently    277\n",
            "Sometimes          261\n",
            "Rarely             142\n",
            "Never               56\n",
            "Name: Frequency [Pop], dtype: int64 \n",
            "\n",
            " R & B Music Listners\n",
            " Never              225\n",
            "Rarely             211\n",
            "Sometimes          184\n",
            "Very frequently    116\n",
            "Name: Frequency [R&B], dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Looking at peoples replay on different Music Types.\n",
        "Rap_music = pd.value_counts(df['Frequency [Rap]'])\n",
        "Rock_music = pd.value_counts(df['Frequency [Rock]'])\n",
        "VG_music = pd.value_counts(df['Frequency [Video game music]'])\n",
        "\n",
        "print('Rap Music Listners \\n',Rap_music,'\\n\\n Rock Music Listners\\n',Rock_music,\n",
        "      '\\n\\n Vidoe Game Music Listners\\n',VG_music)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Q9E6pQFYVdlT",
        "outputId": "7fd96ce6-6852-4103-af09-5df1b432715a"
      },
      "execution_count": 61,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Rap Music Listners \n",
            " Rarely             215\n",
            "Never              200\n",
            "Sometimes          195\n",
            "Very frequently    126\n",
            "Name: Frequency [Rap], dtype: int64 \n",
            "\n",
            " Rock Music Listners\n",
            " Very frequently    330\n",
            "Sometimes          219\n",
            "Rarely              96\n",
            "Never               91\n",
            "Name: Frequency [Rock], dtype: int64 \n",
            "\n",
            " Vidoe Game Music Listners\n",
            " Never              236\n",
            "Rarely             197\n",
            "Sometimes          186\n",
            "Very frequently    117\n",
            "Name: Frequency [Video game music], dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# looking at the Anxiety column values\n",
        "anxiety = pd.value_counts(df['Anxiety'])\n",
        "print(anxiety)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fFALrtACVhHl",
        "outputId": "b763cd47-2096-40bd-d316-f609eadff375"
      },
      "execution_count": 62,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "7.0     122\n",
            "8.0     115\n",
            "6.0      83\n",
            "3.0      69\n",
            "10.0     67\n",
            "5.0      59\n",
            "9.0      56\n",
            "4.0      56\n",
            "2.0      44\n",
            "0.0      35\n",
            "1.0      29\n",
            "7.5       1\n",
            "Name: Anxiety, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# looking at the Depression column values\n",
        "depress = pd.value_counts(df['Depression'])\n",
        "print(depress)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pQGgUMofV6--",
        "outputId": "1e18fdf7-7ebb-4dd3-dcb5-8de43bd07cc4"
      },
      "execution_count": 63,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "7.0     96\n",
            "2.0     93\n",
            "6.0     88\n",
            "0.0     84\n",
            "8.0     77\n",
            "3.0     59\n",
            "4.0     58\n",
            "5.0     56\n",
            "10.0    45\n",
            "1.0     40\n",
            "9.0     38\n",
            "3.5      2\n",
            "Name: Depression, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# looking at the Insomnia column values\n",
        "insomia = pd.value_counts(df['Insomnia'])\n",
        "print(insomia)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ezYEUJYsWFS6",
        "outputId": "b4404e46-afae-49e1-9c1e-8282e67311d8"
      },
      "execution_count": 64,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.0     149\n",
            "2.0      88\n",
            "1.0      82\n",
            "3.0      68\n",
            "6.0      62\n",
            "7.0      59\n",
            "4.0      59\n",
            "5.0      58\n",
            "8.0      49\n",
            "10.0     34\n",
            "9.0      27\n",
            "3.5       1\n",
            "Name: Insomnia, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# looking at the Obsessive compulsive disorder (OCD) column values\n",
        "ocd = pd.value_counts(df['OCD'])\n",
        "print(ocd)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0iGw-KviWK9Q",
        "outputId": "5fecffb7-41f7-432e-d3e2-698086d2520b"
      },
      "execution_count": 65,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.0     248\n",
            "2.0      96\n",
            "1.0      95\n",
            "3.0      64\n",
            "5.0      54\n",
            "4.0      48\n",
            "7.0      34\n",
            "6.0      33\n",
            "8.0      28\n",
            "10.0     20\n",
            "9.0      14\n",
            "8.5       1\n",
            "5.5       1\n",
            "Name: OCD, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# looking at the Music Effects column values\n",
        "music_effects = pd.value_counts(df['Music effects'])\n",
        "print(music_effects)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MQAatwFjWmtk",
        "outputId": "57c4dd9f-d941-44ff-8818-ae539107680c"
      },
      "execution_count": 66,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Improve      550\n",
            "No effect    169\n",
            "Worsen        17\n",
            "Name: Music effects, dtype: int64\n"
          ]
        }
      ]
    }
  ]
}
